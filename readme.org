#+title: Pikachu Volleyball

This is an implementation of Pikachu Volleyball in pure C and SDL2.

Most of the game logic is a direct port of [[https://github.com/gorisanson/pikachu-volleyball][gorisanson'
pikachu-volleyball]] from JavaScript to C.

Although the game physics part are mostly the same. The rendering
method is rewritten from scratch.

* Dependencies
- SDL2
- SDL2_image
- SDL2_mixer
- emscripten (if you want to compile into wasm)

* Build and run yourself
#+begin_src shell
  git clone https://github.com/drshapeless/pikachu-volleyball.git
  cd pikachu-volleyball/src/c
  make
  ./pikachu-volleyball
#+end_src

Since I am using clang as the compiler in the makefile, if you don't
have clang installed or prefer gcc instead, change it yourself.

* Build the wasm version
Make sure you have emscripten installed.
#+begin_src shell
  make wasm
#+end_src

It will generate 4 files.
- pikachu-volleyball.html
- pikachu-volleyball.js
- pikachu-volleyball.wasm
- pikachu-volleyball.data


To run locally on your computer, just open the html file with your
browser.

To host the game, you may put it behind nginx on your web server.

* Limitation of wasm
The wasm version is surrounded with the emscripten logo. You may edit
the html file to customize the page layout yourself.

I haven't implement any window resize utility in the wasm. It requires
a bit of JavaScript. If you want a bigger canvas, you may directly
edit the inline css of the html file.

* Why
I was playing Pikachu Volleyball with friends at work, and found the
game really fun. But the JavaScript nature of the game makes it
sometimes laggy when playing on the ancient hardwares in my
workplace.

Therefore, I decided to make a C version of it to see whether the
performance would be better. I plan to port it to wasm to play it in
the browser.

Originally, I was writing it in C++. But the constructor and
destructor hell were driving me crazy. And such a simple game does not
need that features in C++.

* Features
All the constants are in the config.h. If you want to mess around
with the constants, you can modify and recompile.

Since the game was originally for a screen size of 432 x 304. A lot of
game logic and rendering relies on these magic numbers. I made
flexible window size available by converting real canvas dimensions on
the fly. You may check it out in view.c.

I don't really care about remaking the original game, I just want a
smooth playing experience. Some minor features from the original game
have not been implemented due to this reason, e.g. slow motion after
score.

* Controls
You may refer to config.h for more details.

Player 1:
- Left     : D
- Right    : G
- Up       : R
- Down     : F
- Powerhit : Z


Player 2:
- Left     : L
- Right    : '
- Up       : P
- Down     : ;
- Powerhit : M

* Future improvements
- A better AI, the current AI somehow sucks.
- Nightmare difficulty of AI with more powerful punch and faster
  moving speed. (Not likely to happen, too many things have to be
  rewritten.)
